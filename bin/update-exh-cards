#!/usr/bin/env python3

import sys

sys.path.append('/opt/py')

import datetime
import json
import os
import pathlib
import subprocess

import xmage_maintenance # https://github.com/magefree/xmage-maintenance

BASE_PATH = pathlib.Path(os.environ.get('LORESEEKERDATA', '/usr/local/share/fenhl/lore-seeker'))
EXH_CARDS_DIR = BASE_PATH / 'repo' / 'index' / 'exh-cards'
XMAGE_EXH = pathlib.Path('/opt/git/github.com/EikePeace/mage/branch/EXH')

def announce(new_cards):
    subprocess.run([
        '/opt/git/github.com/fenhl/lore-seeker-discord/master/target/release/lore-seeker',
        '--no-wait', 'announce-exh-cards',
        *sorted(new_cards)
    ], env={**os.environ, 'LORESEEKERDATA': str(pathlib.Path('..').resolve())}, check=True)

def ech_cards():
    return set(subprocess.run(['ruby', '-e', """
        require "./search-engine/lib/card_database"
        require "./search-engine/lib/format/format.rb"
        ech = Format["elder cockatrice highlander"].new
        CardDatabase.load.cards.values.select{|c| ech.in_format?(c) }.each do |c|
          puts c.name
        end
    """], stdout=subprocess.PIPE, stderr=subprocess.DEVNULL, encoding='utf-8', check=True).stdout.splitlines())

def ech_printings():
    for line in subprocess.run(['ruby', '-e', """
        require "./search-engine/lib/card_database"
        require "./search-engine/lib/format/format.rb"
        ech = Format["elder cockatrice highlander"].new
        CardDatabase.load.printings.select{|c| c.set.custom? && ech.in_format?(c) }.each do |c|
          puts "#{c.set.code}\t#{c.name}"
        end
    """], stdout=subprocess.PIPE, stderr=subprocess.DEVNULL, encoding='utf-8', check=True).stdout.splitlines():
        set_code, card_name = line.split('\t', 1)
        yield set_code.upper(), card_name

def exh_cards():
    return ech_cards() & implemented_cards()

def implemented_cards():
    return {card_name for set_code, card_name in implemented_printings()}

def implemented_printings():
    subprocess.run(['git', 'pull', '--quiet'], cwd=XMAGE_EXH)
    return xmage_maintenance.iter_implemented(repo=XMAGE_EXH)

def missing_reprints(*, impl=None):
    if impl is None:
        impl = set(implemented_printings())
    for set_code, card_name in set(ech_printings()) - impl:
        if any(n == card_name for s, n in impl):
            yield set_code, card_name

def prev_cards():
    for exh_db in sorted(EXH_CARDS_DIR.iterdir(), reverse=True):
        if exh_db.suffix == '.json':
            with exh_db.open() as f:
                return set(json.load(f))
    raise FileNotFoundError('Previous card list missing')

def write(card_list):
    with (EXH_CARDS_DIR / f'{datetime.datetime.now(datetime.timezone.utc):%Y-%m-%d}.json').open('w') as f:
        json.dump(sorted(card_list), f)
    #TODO commit new file to repo

def main(do_announce=True):
    prev = prev_cards()
    current = exh_cards()
    #TODO only generate a new file if anything has changed
    write(current)
    if do_announce:
        announce(current - prev)

if __name__ == '__main__':
    main(do_announce='--no-announce' not in sys.argv[1:])
