#!/usr/bin/env python3

import sys

sys.path.append('/opt/py')

import collections
import datetime
import json
import pathlib
import subprocess

import xmage_maintenance # https://github.com/magefree/xmage-maintenance

XMAGE_EXH = pathlib.Path('/opt/git/github.com/EikePeace/mage/branch/EXH')
XMAGE_PRINTINGS_DIR = pathlib.Path('/opt/git/github.com/fenhl/lore-seeker/stage/index/xmage-printings')

def announce(new_cards):
    subprocess.run(['/opt/git/github.com/fenhl/lore-seeker-discord/master/target/release/lore-seeker', '--no-wait', 'announce-exh-cards', *sorted(new_cards)], check=True)

def ech_cards(time=None):
    return set(subprocess.run(['ruby', '-e', """
        require "date"
        require "./search-engine/lib/card_database"
        require "./search-engine/lib/format/format.rb"
        ech = Format["elder cockatrice highlander"].new{}
        CardDatabase.load.cards.values.select{{|c| ech.in_format?(c) }}.each do |c|
          puts c.name
        end
    """.format('' if time is None else f'(Date.new({time:%-Y, %-m, %-d}))')], stdout=subprocess.PIPE, stderr=subprocess.DEVNULL, encoding='utf-8', check=True).stdout.splitlines())

def ech_printings(time=None):
    for line in subprocess.run(['ruby', '-e', """
        require "date"
        require "./search-engine/lib/card_database"
        require "./search-engine/lib/format/format.rb"
        ech = Format["elder cockatrice highlander"].new{}
        CardDatabase.load.printings.select{{|c| c.set.custom? && ech.in_format?(c) }}.each do |c|
          puts "#{c.set.code}\t#{c.name}"
        end
    """.format('' if time is None else f'(Date.new({time:%-Y, %-m, %-d}))')], stdout=subprocess.PIPE, stderr=subprocess.DEVNULL, encoding='utf-8', check=True).stdout.splitlines():
        set_code, card_name = line.split('\t', 1)
        yield set_code.upper(), card_name

def exh_cards(time=None):
    return ech_cards(time) & implemented_cards(time)

def implemented_cards(time=None):
    return {card_name for set_code, card_name in implemented_printings(time)}

def implemented_printings(time=None, *, pull=True):
    if pull:
        subprocess.run(['git', 'pull', '--quiet'], cwd=XMAGE_EXH)
    if time is None:
        last_rev = None
    else:
        last_rev = subprocess.run(['git', 'rev-list', '-n', '1', '--first-parent', f'--before={time:%Y-%m-%d %H:%M:%S}', 'EXH'], cwd=XMAGE_EXH, stdout=subprocess.PIPE, encoding='utf-8', check=True).stdout.strip()
        if not last_rev:
            return set()
    return xmage_maintenance.iter_implemented(repo=XMAGE_EXH, rev=last_rev)

def missing_reprints(time=None, *, impl=None):
    if impl is None:
        impl = set(implemented_printings(time))
    for set_code, card_name in set(ech_printings(time)) - impl:
        if any(n == card_name for s, n in impl):
            yield set_code, card_name

def query_cards(query='*', time=None):
    if time is not None:
        query = f'time:"{time:%Y-%m-%d}" {query}'
    return subprocess.run(['/opt/git/github.com/fenhl/lore-seeker-discord/master/target/release/find-cards', query], stdout=subprocess.PIPE, encoding='utf-8', check=True).stdout.splitlines()

def write_cards(card_list, time=None, *, dir=XMAGE_PRINTINGS_DIR):
    if time is None:
        time = datetime.datetime.now(datetime.timezone.utc)
    with (dir / f'{time:%Y-%m-%d}.json').open('w') as f:
        json.dump(sorted(card_list), f, indent=4, sort_keys=True)
    #TODO commit new file to repo

def write_printings(printing_list, time=None, *, dir=XMAGE_PRINTINGS_DIR):
    if time is None:
        time = datetime.datetime.now(datetime.timezone.utc)
    result = collections.defaultdict(list)
    for set_code, card_name in printing_list:
        result[card_name] = sorted(set(result[card_name]) | {set_code})
    with (dir / f'{time:%Y-%m-%d}.json').open('w') as f:
        json.dump(result, f, indent=4, sort_keys=True)
    #TODO commit new file to repo

def main(time=None, *, dir=XMAGE_PRINTINGS_DIR):
    #TODO only generate a new file if anything has changed
    write_printings(implemented_printings(time), time, dir=dir)
    announce(exh_cards(time) - query_cards('f:exh', time and time - datetime.timedelta(days=1)))

if __name__ == '__main__':
    main()
