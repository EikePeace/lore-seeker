#!/usr/bin/env python3

import sys

import json
import pathlib

GLOBAL_KEYS = [
    'layout',
    'names',
    'manaCost',
    'cmc',
    'colors',
    'colorIdentity',
    'type',
    'supertypes',
    'types',
    'subtypes',
    'text',
    'power',
    'toughness',
    'loyalty',
    'reserved',
    'rulings',
    'foreignNames',
    'legalities'
]

if __name__ == '__main__':
    print('[....] patching MTG JSON with custom sets', end='', flush=True)
    with open('data/CustomSets-x.json') as custom_sets_x_f:
        custom_sets_x = json.load(custom_sets_x_f)
    for i, (c_set_code, c_set_info) in enumerate(custom_sets_x.items()):
        progress = min(4, int(5 * i / len(custom_sets_x)))
        print('\r[{}{}]'.format('=' * progress, '.' * (4 - progress)), end='', flush=True)
        if c_set_code in all_sets_x:
            print('\r[FAIL]')
            sys.exit('[!!!!] duplicate set code {}'.format(c_set_code))
        with open('data/sets/{}.json'.format(c_set_code), 'w') as custom_set_f:
            json.dump(c_set_info, custom_set_f, indent=4, sort_keys=True)
            print(file=custom_set_f)
        for c_card in c_set_info['cards']:
            for setfile_path in pathlib.Path('data/sets').iterdir():
                with setfile_path.open() as set_f:
                    a_set_info = json.load(set_f)
                for a_card in a_set_info['cards']:
                    if a_card['name'] == c_card['name']:
                        if c_set_code not in a_card['printings']:
                            a_card['printings'].append(c_set_code)
                        for key in GLOBAL_KEYS:
                            if key in c_card:
                                a_card[key] = c_card[key]
                with setfile_path.open('w') as set_f:
                    json.dump(a_set_info, set_f, indent=4, sort_keys=True)
                    print(file=set_f)
    print('\r[ ok ]')
