#!/usr/bin/env python3

"""Utility script for running Lore Seeker.

Usage:
  lore-seeker [options]
  lore-seeker discord [<command>]
  lore-seeker name-check
  lore-seeker restart
  lore-seeker -h | --help

Options:
  -h, --help     Print this message and exit.
  -q, --quiet    Print less output.
  --path=<path>  Specify the path at which the Lore Seeker repo is located.
  --port=<port>  Specify the port at which the Rails app will run [Default: 18803].
"""

import sys

import contextlib
import docopt
import gitdir.host.github
import json
import os
import pathlib
import re
import shlex
import signal
import socket
import subprocess
import time
import traceback

CRASH_NOTICE = """To: fenhl@fenhl.net
From: {}@{}
Subject: Lore Seeker crashed

Lore Seeker crashed
"""
GLOBAL_KEYS = [
    'layout',
    'names',
    'manaCost',
    'cmc',
    'colors',
    'colorIdentity',
    'type',
    'supertypes',
    'types',
    'subtypes',
    'text',
    'power',
    'toughness',
    'loyalty',
    'reserved',
    'rulings'
]
CONFIG_PATH = pathlib.Path('/var/www/loreseeker.fenhl.net/config.json')
PIDFILE_PATH = pathlib.Path('/var/www/loreseeker.fenhl.net/pidfile')

def bot_cmd(command_text):
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:
        sock.connect(('127.0.0.1', 18806))
        sock.sendall(command_text.encode('utf-8'))

def cmd(args, *, announce=False, wait=True, check=True, **kwargs):
    if announce:
        print('[ ** ] {}'.format(' '.join(map(shlex.quote, args))), file=sys.stderr)
    if wait:
        return subprocess.run(args, check=check, **kwargs)
    else:
        return subprocess.Popen(args, **kwargs)

def name_check(repo_path=None, *, verbose=False):
    success = True

    def verbose_print(*args, **kwargs):
        if verbose:
            print(*args, **kwargs)

    def fail():
        nonlocal success
        if success:
            success = False
            verbose_print('\r[FAIL]')

    verbose_print('[....] checking for name collisions', end='', flush=True)
    if repo_path is None:
        repo_path = gitdir.host.github.GitHub().repo('fenhl/lore-seeker').stage_path
    with (repo_path / 'data'/ 'CustomSets-x.json').open() as custom_sets_x_f:
        custom_sets_x = json.load(custom_sets_x_f)
    for i, (c_set_code, c_set_info) in enumerate(custom_sets_x.items()):
        progress = min(4, int(5 * i / len(custom_sets_x)))
        if success:
            verbose_print('\r[{}{}]'.format('=' * progress, '.' * (4 - progress)), end='', flush=True)
        if (repo_path / 'data' / 'sets' / '{}.json'.format(c_set_code)).exists():
            fail()
            verbose_print('[!!!!] duplicate set code: {}'.format(c_set_code))
        for setfile_path in (repo_path / 'data' / 'sets').iterdir():
            with setfile_path.open() as set_f:
                a_set_info = json.load(set_f)
            for c_card in c_set_info['cards']:
                for a_card in a_set_info['cards']:
                    if a_card['name'] == c_card['name']:
                        for key in set(GLOBAL_KEYS) - {'rulings'}: # ignore rulings key for now, since it's known to be inconsistent on a large number of cards
                            if c_card.get(key) != a_card.get(key):
                                if key in a_card and key in c_card:
                                    if c_card[key] != a_card[key] and ((not isinstance(a_card[key], str)) or c_card[key] != a_card[key].replace('\u2212', '-')):
                                        if key in ('colors', 'colorIdentity') and set(a_card[key]) == set(c_card[key]):
                                            continue # only order of colors changed
                                        if key == 'text' and re.sub(' ?\\(.*?\\)', '', c_card[key]) == re.sub(' ?\\(.*?\\)', '', a_card[key].replace('\u2212', '-')):
                                            continue # only reminder text changed
                                        fail()
                                        verbose_print('[!!!!] mismatched key {} in card {}. {}: {}, {}: {}'.format(key, a_card['name'], setfile_path.stem, a_card[key], c_set_code, c_card[key]))
                                elif key in a_card:
                                    fail()
                                    verbose_print('[!!!!] mismatched key {} in card {}. {}: {}, {}: missing'.format(key, a_card['name'], setfile_path.stem, a_card[key], c_set_code))
                                elif key in c_card:
                                    if key == 'cmc' and c_card[key] == 0:
                                        continue # CMC 0 omitted
                                    if key in ('colors', 'colorIdentity') and c_card[key] == []:
                                        continue # colorless field omitted
                                    fail()
                                    verbose_print('[!!!!] mismatched key {} in card {}. {}: missing, {}: {}'.format(key, a_card['name'], setfile_path.stem, c_set_code, c_card[key]))
    if success:
        verbose_print('\r[ ok ]')
    return success

def notify_crash(exc=None):
    whoami = subprocess.run(['whoami'], stdout=subprocess.PIPE, check=True).stdout.decode('utf-8').strip()
    hostname = subprocess.run(['hostname', '-f'], stdout=subprocess.PIPE, check=True).stdout.decode('utf-8').strip()
    mail_text = CRASH_NOTICE.format(whoami, hostname)
    if exc is not None:
        mail_text += '\n' + traceback.format_exc()
    return subprocess.run(['ssmtp', 'fenhl@fenhl.net'], input=mail_text.encode('utf-8'), check=True)

def run(*, do_name_check=True, path=gitdir.host.github.GitHub().repo('fenhl/lore-seeker').stage_path, port=18803, verbose=False):
    try:
        cmd(['git', 'reset-to-remote'], cwd=str(path), announce=verbose)
        with contextlib.suppress(ConnectionRefusedError): # no need to reload Discord bot's card database if the bot isn't running
            bot_cmd('reload')
        #if do_name_check:
        #    name_check(path, verbose=verbose)
        cmd(['rake', 'rules:update'], cwd=str(path), announce=verbose)
        cmd(['rake', 'index'], cwd=str(path), announce=verbose)
        cmd(['/opt/venv/py3.7/bin/python', 'bin/make-trice-download'], cwd=str(path), announce=verbose)
        cmd(['bundle', 'install'], cwd=str(path / 'search-engine'), announce=verbose)
        cmd(['bundle', 'install'], cwd=str(path / 'frontend'), announce=verbose)
        with CONFIG_PATH.open() as config_f:
            config = json.load(config_f)
        env = {
            'DISCORD_CLIENT_ID': config['clientID'],
            'DISCORD_CLIENT_SECRET': config['clientSecret'],
            **os.environ
        }
    except Exception as e:
        notify_crash(e)
        raise
    with open('/var/www/loreseeker.fenhl.net/access.log', 'a') as access_log:
        lore_seeker = cmd(['bundle', 'exec', 'rails', 'server', '-p', str(port)], env=env, cwd=str(path / 'frontend'), stdout=access_log, stderr=access_log, wait=False, announce=verbose)
        with PIDFILE_PATH.open('w') as pidfile:
            print(str(lore_seeker.pid), file=pidfile)
        lore_seeker.wait()
        if lore_seeker.returncode != 0 and PIDFILE_PATH.exists():
            notify_crash()

if __name__ == '__main__':
    arguments = docopt.docopt(__doc__)
    if arguments['discord']:
        if arguments['<command>']:
            bot_cmd(arguments['<command>'])
        else:
            # quick alias for starting the Discord bot (https://github.com/fenhl/lore-seeker-discord)
            sys.exit(subprocess.run(['lore-seeker-discord']).returncode)
    elif arguments['name-check']:
        sys.exit(int(not name_check(verbose=not arguments['--quiet'])))
    elif arguments['restart']:
        with PIDFILE_PATH.open() as pidfile:
            pid = int(pidfile.read().strip())
        PIDFILE_PATH.unlink() # remove pidfile to silence crash notification
        os.kill(pid, signal.SIGTERM)
    else:
        while True:
            if arguments['--path']:
                path = pathlib.Path(arguments['--path'])
            else:
                path = None
            run(path=path, port=int(arguments['--port']), verbose=not arguments['--quiet'])
            time.sleep(10)
