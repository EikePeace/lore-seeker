#!/usr/bin/env python3

import sys

import datetime
import json
import pathlib
import random
import xml.etree.ElementTree

import more_itertools # PyPI: more-itertools

import lsutil

CACHE = {}
PRECONS_PATHS = {
    'crawl': pathlib.Path('data/crawl-precons.json'),
    'custard': pathlib.Path('data/custard-precons.json'),
    'ech': pathlib.Path('data/ech-precons.json')
}

def parse_zone(deck_xml, zone_name):
    zone = deck_xml.find(f'./zone[@name="{zone_name}"]')
    result = []
    for card in zone:
        found = False
        card_name = card.get('name')
        if '‘' not in card_name:
            card_name = card_name.replace('’', "'")
        try:
            set_code, card_info = lsutil.find_card(card_name)
        except (IndexError, ValueError):
            found = False
        else:
            found = True
        if not found and card_name[:3] in lsutil.custom_sets() and card_name[3] == ' ':
            set_code, card_name = card_name.split(' ', 1)
            try:
                set_code, card_info = lsutil.find_card(card_name, set_code)
            except (IndexError, ValueError) as e:
                card_name = f'{set_code} {card_name}'
                found = False
            else:
                found = True
        if not found:
            card_name = input(f'[ ?? ] rename {card_name} to ')
            try:
                set_code, card_info = lsutil.find_card(card_name)
            except (IndexError, ValueError):
                set_code = input(f'[ ?? ] set code for {card_name}: ')
                try:
                    set_code, card_info = lsutil.find_card(card_name, set_code)
                except (IndexError, ValueError) as e:
                    raise ValueError(f'Error in card {card.get("name")}') from e
        result.append([
            int(card.get('number')),
            set_code.lower(),
            lsutil.custom_sets()[set_code]['meta']['setVersion'],
            card_info['number'],
            card_name
        ])
    return result

if __name__ == '__main__':
    if sys.argv[1:] in [['-h'], ['--help']]:
        print('Usage: import-custom-precon (crawl|custard|ech) <decklist> <set-code> [<release-date>]')
        sys.exit()
    deck_format = sys.argv[1]
    if deck_format not in {'crawl', 'custard', 'ech'}:
        sys.exit('[!!!!] unknown format (expected crawl, custard, or ech, got {})'.format(deck_format))
    deck_path = pathlib.Path(sys.argv[2]).resolve()
    deck_xml = xml.etree.ElementTree.parse(deck_path).getroot()
    deck_name = deck_xml.find('./deckname').text
    if deck_name is None:
        deck_name = input('[ ?? ] deck name: ')
    with PRECONS_PATHS[deck_format].open(encoding='utf-8') as f:
        precons = json.load(f)
    deck_info = {
        'cards': parse_zone(deck_xml, 'main'),
        'name': deck_name,
        'path': str(deck_path),
        'release_date': sys.argv[4] if len(sys.argv) > 4 else f'{datetime.datetime.utcnow().date():%Y-%m-%d}',
        'set_code': sys.argv[3].lower(),
        'set_name': lsutil.custom_sets()[sys.argv[3]]['name'],
        'sideboard': parse_zone(deck_xml, 'side'),
        'type': {
            'crawl': 'Brawl Deck',
            'custard': 'Intro Pack',
            'ech': 'Commander Deck'
        }[deck_format]
    }
    if deck_format == 'crawl':
        deck_info['brawlers'] = [card_info for card_info in deck_info['sideboard'] if lsutil.yesno(f'is {card_info[4]} the deck commander?')]
    if deck_format == 'ech':
        deck_info['commanders'] = [card_info for card_info in deck_info['sideboard'] if lsutil.yesno(f'is {card_info[4]} the deck commander?')]
    if any(iter_deck['name'] == deck_name for iter_deck in precons):
        precons = [
            deck_info if iter_deck['name'] == deck_name else iter_deck
            for iter_deck in precons
        ]
    else:
        precons.append(deck_info)
    with PRECONS_PATHS[deck_format].open('w', encoding='utf-8', newline='\n') as f:
        json.dump(precons, f, indent=4, sort_keys=True)
        print(file=f)
